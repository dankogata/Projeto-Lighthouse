{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d5615b8-2fcd-4dc1-840e-8a8b7ccbfa3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "df =  pd.read_csv('desafio_indicium_imdb.csv',encoding='utf-8')\n",
    "#Check null values\n",
    "print('Nulos: ',df.isnull().sum())\n",
    "#Format csv to table, show all columns\n",
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf26a3c9-4333-43c0-83e6-cbc0bbde831a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transform null values to 0\n",
    "df['Meta_score'] = df['Meta_score'].fillna(0.0)\n",
    "df['Gross'] = df['Gross'].fillna(0.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0cdfff2f-f46d-42be-88e1-cc9f97a0cd02",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove Columns\n",
    "df.drop('Certificate',axis=1,inplace=True)\n",
    "df.drop('Overview',axis=1,inplace=True)\n",
    "df.drop('Director',axis=1,inplace=True)\n",
    "df.drop('Star1',axis=1,inplace=True)\n",
    "df.drop('Star2',axis=1,inplace=True)\n",
    "df.drop('Star3',axis=1,inplace=True)\n",
    "df.drop('Star4',axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64d024d0-be5d-4a59-8e6b-363afce48dfc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Change minutes for number format\n",
    "df['Runtime'] = df['Runtime'].replace({' min':''},regex=True)\n",
    "df['Runtime'] = pd.to_numeric(df['Runtime'])\n",
    "\n",
    "#Check value PG in column Released_year\n",
    "PG_Error = df[df['Released_Year']== 'PG']\n",
    "# print(PG_Error)\n",
    "df['Released_Year'] = df['Released_Year'].replace({'PG':'1995'})\n",
    "# print(df[df['Series_Title']=='Apollo 13']) \n",
    "df['Released_Year'] = pd.to_numeric(df['Released_Year'])\n",
    "\n",
    "#chance ',' to ''\n",
    "df['Gross'] = df['Gross'].replace({',':''},regex=True)\n",
    "df['Gross'] = pd.to_numeric(df['Gross'])\n",
    "\n",
    "#Convert to numeric format\n",
    "df['IMDB_Rating'] = pd.to_numeric(df['IMDB_Rating'])\n",
    "df['Meta_score'] = pd.to_numeric(df['Meta_score'])\n",
    "df['No_of_Votes'] = pd.to_numeric(df['No_of_Votes'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d0a1ae2-b505-45da-86cf-ee0cb482bd93",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Data Filter, using Releasing year since 1999\n",
    "Condition_Movie = df['Released_Year']<=1999\n",
    "Year_Films = df[Condition_Movie].index\n",
    "df.drop(Year_Films,inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00fb3946-8211-44dd-8717-7d5bdb6e9fa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Method Count ==> Frequency\n",
    "#Get genres\n",
    "Genres_List_Frequency= []\n",
    "genres = df['Genre'].str.split(',')\n",
    "genres = genres.explode('Genres')\n",
    "genres_counts = genres.str.strip().value_counts()\n",
    "\n",
    "#Append to a list\n",
    "Genres_List.append(genres_counts)\n",
    "print(genres_counts.head(15))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6bb9f161-693a-4318-a421-24a8a7f88a9d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Preparing table to return only genre and Gross \n",
    "genre_types = genres.str.strip().unique().tolist()\n",
    "\n",
    "def mean_profit_by_genre(df, genre_types, gross_col='Gross', genre_col='Genre'):\n",
    "    results = {}\n",
    "    for g in genre_types:\n",
    "        mask = df[genre_col].str.contains(g, na=False)  #only values with genre\n",
    "        results[g] = df.loc[mask, gross_col].mean()\n",
    "    return results\n",
    "\n",
    "MeanProfit = mean_profit_by_genre(df, genre_types)\n",
    "MeanProfitOrder = sorted(MeanProfit.items(), key=lambda item: item[1], reverse=True)\n",
    "print(MeanProfitOrder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "436e4b17-073a-49c3-a7d2-2ffbce0bb511",
   "metadata": {},
   "outputs": [],
   "source": [
    "nextFilm = MeanProfitOrder[0][0]\n",
    "avgProfit = MeanProfitOrder[0][1]\n",
    "print(f\"O gênero mais promissor é: {nextFilm} e com o faturamento médio de R$ {avgProfit/1000000:.1f} Milhões\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
